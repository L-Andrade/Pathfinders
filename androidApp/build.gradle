plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    id 'com.google.devtools.ksp'
    id 'kotlin-parcelize'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id("kotlinx-serialization")
    alias(libs.plugins.compose.compiler)
}

android {
    namespace 'com.andradel.pathfinders'
    compileSdk 35

    defaultConfig {
        applicationId "com.andradel.pathfinders"
        minSdk 26
        targetSdk 35
        versionCode 3
        versionName "1.2"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    signingConfigs {
        release {
            storeFile rootProject.file('release.jks')
            storePassword project.hasProperty('storePassword') ? project.getProperty('storePassword') : System.getenv('PATHFINDERS_STORE_PASSWD')
            keyAlias 'key0'
            keyPassword project.hasProperty('keyPassword') ? project.getProperty('keyPassword') : System.getenv('PATHFINDERS_KEY_PASSWD')
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix '.debug'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    flavorDimensions += "version"
    productFlavors {
        create("pathfinders") {
            dimension = "version"
            versionNameSuffix = "-pathfinders"
        }
        create("unit") {
            dimension = "version"
            applicationIdSuffix = ".unit"
            versionNameSuffix = "-unit"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    // to use KSP generated Code
    applicationVariants.all { variant ->
        def variantName = variant.name
        sourceSets {
            main {
                java.srcDir file("build/generated/ksp/$variantName/kotlin")
            }
        }
    }
}

dependencies {
    implementation(libs.koin.android)
    implementation(libs.koin.annotations)
    implementation(libs.koin.androidx.compose)
    ksp(libs.koin.ksp)

    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose
    implementation libs.androidx.material3

    // Compose
    implementation(platform(libs.compose.bom))
    androidTestImplementation(platform(libs.compose.bom))
    implementation libs.compose.ui
    implementation libs.compose.ui.preview
    implementation libs.androidx.lifecycle.runtime.compose
    debugImplementation libs.compose.ui.tooling
    debugImplementation libs.compose.ui.manifest

    implementation libs.lottie.compose

    // Firebase
    implementation libs.firebase.ui.auth
    implementation libs.firebase.database
    implementation libs.firebase.crashlytics
    implementation libs.firebase.functions
    implementation libs.firebase.messaging
    implementation libs.firebase.auth

    // Serialization
    implementation(libs.kotlinx.serialization)

    implementation(libs.kotlinx.datetime)

    // Nav
    implementation libs.compose.navigation

    implementation libs.androidx.lifecycle.viewmodel.compose

    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation libs.compose.ui.test.junit
}

ksp {
    arg("KOIN_CONFIG_CHECK","true")
}